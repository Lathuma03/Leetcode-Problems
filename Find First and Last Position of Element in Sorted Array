Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity. 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1] 

Constraints:

0 <= nums.length <= 105
-109 <= nums[i] <= 109
nums is a non-decreasing array.
-109 <= target <= 109

//solution

class Solution {
    public int[] searchRange(int[] nums, int target) {
        int ans={-1,-1};
        int s=search(nums,target,fs:true);
        int e=search(nums,target,fs:false);
        ans[0]=s;
        ans[1]=e;
        return ans; 
        
    }
    public int[] search(int[] nums, int target, boolean fs)
    {
        int ans=-1;
        int s=0;
        int e=nums.length-1;
        while(s<=e)
        {
            int m= s+(e-s)/2;
            if(target<nums[m])
            {
                e=m-1;
            }
            else if
            {
                s=m+1;
            }
            else
            {
                ans=m;
                if(fs)
                {
                    e=m-1;
                }
                else
                {
                    s=m+1
                }
            }
        }
        
        return ans;
    }
}
